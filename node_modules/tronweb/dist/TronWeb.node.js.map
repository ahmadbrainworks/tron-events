{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"injectpromise\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"ethers\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/lib/sidechain.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","toUtf8String","recoverAddress","SigningKey","AbiCoder","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","com_priKeyBytes","com_addressBytes","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","properties","mapEvent","event","data","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","abi","inputs","padLeft","padding","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","resolve","setTimeout","code","accounts","crypto","ethersUtils","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","baseURL","auth","request","then","payload","method","keys","params","self","Validator","tronWeb","param","msg","callback","Function","normalized","no","gt","lt","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","from","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","stateMutability","rawParameter","constructorParams","find","it","args","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","shieldedParameter","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","account","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","fromPrivateKey","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","getApprovedList","signedTransaction","sendRawTransaction","signedHexTransaction","sendHexTransaction","hexTransaction","sendTransaction","transactionBuilder","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","messageDigest","recovered","tronAddress","base58Address","fromHex","toHexString","signingKey","signDigest","getParamTypes","decodeOutput","filter","Method","outputs","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","constant_result","msg2","chunk","broadcast","error","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","events","latestEvent","newEvents","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","components","libs","plugged","skipped","plugin","semver","satisfies","version","fullClass","className","classInstanceName","component","Event","healthcheck","providers","isValidProvider","isConnected","sinceTimestamp","size","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","only_confirmed","only_unconfirmed","querystring","response","getEventsByTransactionID","SideChain","sideOptions","mainchain","fullHost","mainGatewayAddress","sideGatewayAddress","sideChainId","sidechain","setMainGatewayAddress","setSideGatewayAddress","setChainId","chainId","chainIdByteArr","byteArr","byteArrHash","depositFee","depositTrx","contractInstance","depositTRX","depositTrc10","depositTRC10","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","trxHash","mappingFee","mappingTrc","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee","eventHeaders","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","setFullNodeHeader","setEventHeader","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","setServer","currentProviders","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"injectpromise\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"ethers\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// set strict as true: if the length of str is odd, add 0 before the str to make its length as even\nexport function hexStr2byteArray(str, strict = false) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    let len = str.length;\n\n    if (strict) {\n        if (len % 2) {\n            str = `0${str}`;\n            len++;\n        }\n    }\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < len; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import { utils } from \"ethers\";\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst toUtf8String = utils.toUtf8String;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n};\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey, strict = false) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey, strict);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type === 'constructor' && 'payable' === func.stateMutability.toLowerCase();\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        if (options.rawParameter && utils.isString(options.rawParameter)) {\n            parameters = options.rawParameter.replace(/^(0x)/, '');\n        } else {\n            var constructorParams = abi.find(\n                (it) => {\n                    return it.type === 'constructor';\n                }\n            );\n\n            if (typeof constructorParams !== 'undefined' && constructorParams) {\n                const abiCoder = new AbiCoder();\n                const types = [];\n                const values = [];\n                constructorParams = constructorParams.inputs;\n\n                if (parameters.length != constructorParams.length)\n                    return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let type = constructorParams[i].type;\n                    let value = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n                    else if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n        }\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: this.tronWeb.feeLimit\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress)\n        };\n\n        if (functionSelector && utils.isString(functionSelector)) {\n            functionSelector = functionSelector.replace('/\\s*/g', '');\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let {type, value} = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map(type => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256')\n                        }\n                        return type\n                    })\n\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n\n            if (options.shieldedParameter && utils.isString(options.shieldedParameter)) {\n                parameters = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            if (options.rawParameter && utils.isString(options.rawParameter)) {\n                parameters = options.rawParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameters;\n        }\n\n\n        if (!options._isConstant) {\n            args.call_value = parseInt(callValue)\n            args.fee_limit = parseInt(feeLimit)\n            if (utils.isNotNullOrUndefined(tokenValue))\n                args.call_token_value = parseInt(tokenValue)\n            if (utils.isNotNullOrUndefined(tokenId))\n                args.token_id = parseInt(tokenId)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision < 0 || precision > 6))\n            return callback('precision must be a positive integer >= 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (!(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value ={\n            toHexString: function() {\n                return '0x' + privateKey\n            },\n            value: privateKey\n        }\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendHexTransaction(signedHexTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendHexTransaction, signedHexTransaction, options);\n\n        if (!utils.isHex(signedHexTransaction))\n            return callback('Invalid hex transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        const params = {\n            transaction: signedHexTransaction\n        }\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasthex',\n             params,\n            'post'\n        ).then(result => {\n            if (result.result) {\n                result.transaction = JSON.parse(result.transaction)\n                result.hexTransaction = signedHexTransaction;\n            }\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    broadcastHex(...args) {\n        return this.sendHexTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] === 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(ADDRESS_PREFIX_REGEX, '0x')\n\n            if (types[index].match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(ADDRESS_PREFIX_REGEX, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n            _isConstant: true\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener,\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys ? contract.abi.entrys : [] : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.only_confirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.only_unconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import injectpromise from 'injectpromise';\nimport Validator from 'paramValidator';\nexport default class SideChain {\n    constructor(sideOptions, TronWeb = false, mainchain = false, privateKey = false) {\n        this.mainchain = mainchain;\n        const { fullHost, fullNode, solidityNode, eventServer, mainGatewayAddress, sideGatewayAddress, sideChainId } = sideOptions;\n        this.sidechain = new TronWeb(fullHost || fullNode, fullHost || solidityNode, fullHost || eventServer, privateKey);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(this.sidechain);\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                transaction.raw_data.contract[0].Permission_id = permissionId;\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n        // sign\n        try {\n            return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== this.sidechain.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    /**\n    * deposit asset to sidechain\n    */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch (functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport { version } from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport SideChain from 'lib/sidechain';\nimport { keccak256 } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nconst FEE_LIMIT = 150000000;\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n        // for retro-compatibility:\n        solidityNode = false, eventServer = false, sideOptions = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        let headers = false;\n        let eventHeaders = false;\n\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            sideOptions = solidityNode;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n        // for sidechain\n        if (typeof sideOptions === 'object' && (sideOptions.fullNode || sideOptions.fullHost)) {\n            this.sidechain = new SideChain(sideOptions, TronWeb, this, privateKey);\n        } else {\n            privateKey = privateKey || sideOptions;\n        }\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n        this.injectPromise = injectpromise(this);\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    setHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader (headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey, strict = false) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey, strict);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if ((!isFinite(val)) || /^\\s*$/.test(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}